{"version":3,"file":"FontPicker.js","sources":["../src/FontPicker.ts"],"sourcesContent":["import {\n\tFont,\n\tFONT_FAMILY_DEFAULT,\n\tFontList,\n\tFontManager,\n\tgetFontId,\n\tOptions,\n\tOPTIONS_DEFAULTS,\n\tSortOption,\n} from \"@samuelmeuli/font-manager\";\n\n/**\n * Font picker user interface\n */\nexport default class FontPicker {\n\t// Button in the font list which contains and highlights the currently active font\n\tprivate activeFontButton: HTMLButtonElement;\n\n\t// <p> element in the dropdownButton containing the name of the currently active font\n\tprivate dropdownFamily: HTMLParagraphElement;\n\n\t// State of the font picker (expanded or collapsed)\n\tprivate expanded = false;\n\n\t// Instance of the FontManager class used for managing, downloading and applying fonts\n\tprivate fontManager: FontManager;\n\n\t// <div> element in which the font picker is rendered\n\tprivate fontPickerDiv: HTMLDivElement;\n\n\t// Font list which is shown below the dropdownButton if expanded === true\n\tprivate ul: HTMLUListElement;\n\n\t/**\n\t * Instantiate a FontManager object and generate the font picker HTML\n\t */\n\tconstructor(\n\t\tapiKey: string,\n\t\tdefaultFamily: string = FONT_FAMILY_DEFAULT,\n\t\t{\n\t\t\tpickerId = OPTIONS_DEFAULTS.pickerId,\n\t\t\tfamilies = OPTIONS_DEFAULTS.families,\n\t\t\tcategories = OPTIONS_DEFAULTS.categories,\n\t\t\tscripts = OPTIONS_DEFAULTS.scripts,\n\t\t\tvariants = OPTIONS_DEFAULTS.variants,\n\t\t\tfilter = OPTIONS_DEFAULTS.filter,\n\t\t\tlimit = OPTIONS_DEFAULTS.limit,\n\t\t\tsort = OPTIONS_DEFAULTS.sort,\n\t\t}: Partial<Options>,\n\t\t// eslint-disable-next-line @typescript-eslint/no-empty-function\n\t\tonChange: (font: Font) => void = (): void => {},\n\t) {\n\t\t// Function bindings\n\t\tthis.closeEventListener = this.closeEventListener.bind(this);\n\t\tthis.toggleExpanded = this.toggleExpanded.bind(this);\n\n\t\t// Initialize FontManager and FontPicker UI\n\t\tconst options = {\n\t\t\tpickerId,\n\t\t\tfamilies,\n\t\t\tcategories,\n\t\t\tscripts,\n\t\t\tvariants,\n\t\t\tfilter,\n\t\t\tlimit,\n\t\t\tsort,\n\t\t};\n\t\tthis.fontManager = new FontManager(apiKey, defaultFamily, options, onChange);\n\t\tthis.generateUI(sort);\n\t}\n\n\t/**\n\t * Download list of available fonts and generate the font picker HTML\n\t */\n\tprivate generateUI(sort: SortOption): void {\n\t\tconst { selectorSuffix } = this.fontManager;\n\t\tconst pickerId = `font-picker${selectorSuffix}`;\n\n\t\t// Locate <div> where font picker should be rendered\n\t\tthis.fontPickerDiv = document.getElementById(pickerId) as HTMLDivElement;\n\t\tif (!this.fontPickerDiv) {\n\t\t\tthrow Error(`Missing div with id=\"${pickerId}\"`);\n\t\t}\n\n\t\t// Generate HTML for dropdown button (contains family of active font and dropdown icon)\n\t\tconst dropdownButton = document.createElement(\"button\");\n\t\tdropdownButton.classList.add(\"dropdown-button\");\n\t\tdropdownButton.onclick = this.toggleExpanded;\n\t\tdropdownButton.onkeypress = this.toggleExpanded;\n\t\tdropdownButton.type = \"button\";\n\t\tthis.fontPickerDiv.appendChild(dropdownButton);\n\t\t// Font family of active font\n\t\tthis.dropdownFamily = document.createElement(\"p\");\n\t\tthis.dropdownFamily.textContent = this.fontManager.getActiveFont().family;\n\t\tthis.dropdownFamily.classList.add(\"dropdown-font-family\");\n\t\tdropdownButton.appendChild(this.dropdownFamily);\n\t\t// Dropdown icon (possible classes/states: \"loading\", \"finished\", \"error\")\n\t\tconst dropdownIcon = document.createElement(\"p\");\n\t\tdropdownIcon.classList.add(\"dropdown-icon\", \"loading\");\n\t\tdropdownButton.appendChild(dropdownIcon);\n\n\t\t// Fetch and render font list\n\t\tthis.fontManager\n\t\t\t.init()\n\t\t\t.then((fontMap: FontList): void => {\n\t\t\t\tconst fonts = Array.from(fontMap.values());\n\t\t\t\tif (sort === \"alphabet\") {\n\t\t\t\t\tfonts.sort((font1: Font, font2: Font): number =>\n\t\t\t\t\t\tfont1.family.localeCompare(font2.family),\n\t\t\t\t\t);\n\t\t\t\t}\n\t\t\t\tthis.generateFontList(fonts);\n\t\t\t\tdropdownIcon.classList.replace(\"loading\", \"finished\");\n\t\t\t})\n\t\t\t.catch((err: Error): void => {\n\t\t\t\t// On error: Log error message\n\t\t\t\tdropdownIcon.classList.replace(\"loading\", \"error\");\n\t\t\t\tconsole.error(\"Error trying to fetch the list of available fonts\");\n\t\t\t\tconsole.error(err);\n\t\t\t});\n\t}\n\n\t/**\n\t * Generate <ul> with all font families below downloadButton\n\t */\n\tprivate generateFontList(fonts: Font[]): void {\n\t\t// Generate HTML for font list below dropdown button\n\t\tthis.ul = document.createElement(\"ul\");\n\t\tthis.ul.classList.add(\"font-list\");\n\n\t\t// Generate HTML for font list entries\n\t\tfonts.forEach((font): void => {\n\t\t\tthis.addFontLi(font);\n\t\t});\n\t\tthis.fontPickerDiv.appendChild(this.ul);\n\n\t\t// Highlight active font and save reference to the corresponding HTML element\n\t\tconst activeFontFamily = this.fontManager.getActiveFont().family;\n\t\tconst activeFontId = getFontId(activeFontFamily);\n\t\tconst fontButtonId = `font-button-${activeFontId}${this.fontManager.selectorSuffix}`;\n\t\tthis.activeFontButton = document.getElementById(fontButtonId) as HTMLButtonElement;\n\t\tif (this.activeFontButton) {\n\t\t\tthis.activeFontButton.classList.add(\"active-font\");\n\t\t} else {\n\t\t\tconsole.error(`Could not find font button with ID (${fontButtonId})`);\n\t\t}\n\t}\n\n\t/**\n\t * Generate list entry in font picker UI for the provided font. Highlight it if it's the active\n\t * font\n\t */\n\tprivate addFontLi(font: Font, listIndex?: number): void {\n\t\tconst fontId = getFontId(font.family);\n\t\tconst li = document.createElement(\"li\");\n\t\tli.classList.add(\"font-list-item\");\n\t\tconst fontButton = document.createElement(\"button\");\n\t\tfontButton.type = \"button\";\n\t\tfontButton.id = `font-button-${fontId}${this.fontManager.selectorSuffix}`;\n\t\tfontButton.classList.add(\"font-button\");\n\t\tfontButton.textContent = font.family;\n\n\t\t// Update active font when font button is clicked\n\t\tconst onActivate = (): void => {\n\t\t\tthis.toggleExpanded();\n\t\t\tthis.setActiveFont(font.family);\n\t\t};\n\t\tfontButton.onclick = onActivate;\n\t\tfontButton.onkeypress = onActivate;\n\t\tli.appendChild(fontButton);\n\n\t\t// Insert font button at the specified index. If not specified, append to the end of the list\n\t\tif (listIndex !== undefined && listIndex !== null) {\n\t\t\tthis.ul.insertBefore(li, this.ul.children[listIndex]);\n\t\t} else {\n\t\t\tthis.ul.appendChild(li);\n\t\t}\n\t}\n\n\t/**\n\t * EventListener for closing the font picker when clicking anywhere outside it\n\t */\n\tprivate closeEventListener(e: MouseEvent): void {\n\t\tlet targetEl = e.target as Node; // Clicked element\n\t\tconst fontPickerEl = document.getElementById(`font-picker${this.fontManager.selectorSuffix}`);\n\n\t\t// eslint-disable-next-line no-constant-condition\n\t\twhile (true) {\n\t\t\tif (targetEl === fontPickerEl) {\n\t\t\t\t// Click inside font picker: Exit\n\t\t\t\treturn;\n\t\t\t}\n\t\t\tif (targetEl.parentNode) {\n\t\t\t\t// Click outside font picker: Move up the DOM\n\t\t\t\ttargetEl = targetEl.parentNode;\n\t\t\t} else {\n\t\t\t\t// DOM root is reached: Toggle picker, exit\n\t\t\t\tthis.toggleExpanded();\n\t\t\t\treturn;\n\t\t\t}\n\t\t}\n\t}\n\n\t/**\n\t * Expand/collapse the picker's font list\n\t */\n\tprivate toggleExpanded(): void {\n\t\tif (this.expanded) {\n\t\t\tthis.expanded = false;\n\t\t\tthis.fontPickerDiv.classList.remove(\"expanded\");\n\t\t\tdocument.removeEventListener(\"click\", this.closeEventListener as EventListener);\n\t\t} else {\n\t\t\tthis.expanded = true;\n\t\t\tthis.fontPickerDiv.classList.add(\"expanded\");\n\t\t\tdocument.addEventListener(\"click\", this.closeEventListener as EventListener);\n\t\t}\n\t}\n\n\t/**\n\t * @see FontManager\n\t */\n\tpublic getFonts(): FontList {\n\t\treturn this.fontManager.getFonts();\n\t}\n\n\t/**\n\t * Add font to font picker and font map\n\t */\n\tpublic addFont(fontFamily: string, index?: number, url = ''): void {\n\t\tif (Array.from(this.fontManager.getFonts().keys()).includes(fontFamily)) {\n\t\t\tthrow Error(\n\t\t\t\t`Did not add font to font picker: Font family \"${fontFamily}\" is already in the list`,\n\t\t\t);\n\t\t}\n\n\t\t// Add font to font map in FontManager\n\t\tthis.fontManager.addFont(fontFamily, true, url);\n\n\t\t// Add font to list in font picker\n\t\tconst font = this.fontManager.getFonts().get(fontFamily);\n\t\tif (font) {\n\t\t\tthis.addFontLi(font, index);\n\t\t} else {\n\t\t\tconsole.error(`Font \"${fontFamily}\" is missing in font list`);\n\t\t}\n\t}\n\n\t/**\n\t * Remove font from font picker and font map\n\t */\n\tpublic removeFont(fontFamily: string): void {\n\t\t// Remove font from font map in FontManager\n\t\tthis.fontManager.removeFont(fontFamily);\n\n\t\t// Remove font from list in font picker\n\t\tconst fontId = getFontId(fontFamily);\n\t\tconst fontButton = document.getElementById(\n\t\t\t`font-button-${fontId}${this.fontManager.selectorSuffix}`,\n\t\t);\n\t\tif (fontButton) {\n\t\t\tconst fontLi = fontButton.parentElement;\n\t\t\tfontButton.remove();\n\t\t\tif (fontLi) {\n\t\t\t\tfontLi.remove();\n\t\t\t}\n\t\t} else {\n\t\t\tthrow Error(\n\t\t\t\t`Could not remove font from font picker: Font family \"${fontFamily}\" is not in the list`,\n\t\t\t);\n\t\t}\n\t}\n\n\t/**\n\t * @see FontManager\n\t */\n\tpublic getActiveFont(): Font {\n\t\treturn this.fontManager.getActiveFont();\n\t}\n\n\t/**\n\t * Set the specified font as the active font, download it and highlight it in the font list\n\t */\n\tpublic setActiveFont(fontFamily: string): void {\n\t\tthis.fontManager.setActiveFont(fontFamily);\n\t\tconst fontId = getFontId(fontFamily);\n\n\t\t// Write new font family in dropdown button and highlight font entry in the list\n\t\tthis.dropdownFamily.textContent = fontFamily;\n\t\tthis.dropdownFamily.style.setProperty(\"font-family\", fontFamily);\n\t\tif (this.activeFontButton) {\n\t\t\tthis.activeFontButton.classList.remove(\"active-font\");\n\t\t\tthis.activeFontButton = document.getElementById(\n\t\t\t\t`font-button-${fontId}${this.fontManager.selectorSuffix}`,\n\t\t\t) as HTMLButtonElement;\n\t\t\tthis.activeFontButton.classList.add(\"active-font\");\n\t\t} else {\n\t\t\tconsole.error(\"`activeFontButton` is undefined\");\n\t\t}\n\t}\n\n\t/**\n\t * Update the onChange function (executed when changing the active font)\n\t */\n\tpublic setOnChange(onChange: (font: Font) => void): void {\n\t\tthis.fontManager.setOnChange(onChange);\n\t}\n}\n"],"names":["OPTIONS_DEFAULTS","FontManager","getFontId"],"mappings":"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"}